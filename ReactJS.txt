DOM: Document Object Model
JSX: java script extension for XML
XML: describes data
HTML: displays data

JSX:
const element = (<h1>Hello, {formatName(user)}!</h1>);

Naming:
class --> className

User input is safe to embed

React Elements: (React.ceateElement())
const = (<h1 className="greeing"> Hello </h1>)
const element = React.createElement("h1",{className:"greeting"},"Hello")

Root DOM node: everything in the division <div id="root"></div>

Render a React element into a root DOM node (ReactDOM.render(element,node)):
const element = <h1>Hello, world</h1>;
ReactDOM.render(element, document.getElementById('root'));

React elements can't be changed, they can be updated by making new ones.
Only the text node contents that change get updated by React
*how should the UI look mentality > how to change it

Components: (like function) accepts single props (inputs) return react elements
Function components: literally javascript functions

All React components must act like pure functions with respect to their props.

Function to Class:
1. class className extends React.Component
2. add single empty method render()
3. body of function into render() {here}
4. replace pros with this.props in render body

Adding state
1. Replace this.props.date with this.state.date in the render()
2. Add a class constructor that assigns the initial this.state
    constructor(props) {
        super(props);
        this.state={---}
    }
3. ReactDOM.render(
    <className />
    document.getElementById('root')
)

LifeCycle Methods:
Mounting: set up a timer whenever Clock is rendered for the first time
    componentDidMount() {this.timerID = setInterval(() => this.tick(),1000}
Unmounting: clear timer whenever DOM produced by Clock is removed
    componentWillUnmount() {clearInterval(this.timerID);}
this.setState() updates on component local state

setState():
    -do not modify directly this.state=---- NO only assign this.state in constructor
    - modify with thi,setState ({yes})
    - can update individual independent variables functionName().then (response => {this.setState({---})})

State is only accessible to the one that ones it (not parent nor child) --> called local/encapsulated
Pass down with props: <FormattedDate date={this.state.date} /> OR <h2>It is {this.state.date.toLocaleTimeString()}.</h2>
function FormattedDate(props) {
  return <h2>hi {props.date.toLocaleTimeString()}.</h2>;
}

Handling Events:
HTML VS REACT:
onclick="activateLasers()" vs onClick={activateLasers}

Passing arguments to event handlers: <button onClick={this.deleteRow.bind(this, id)}>Delete Row</button>

Conditional Rendering: if works
&&
    true && expression = expression
    false && expression = false
    So if the condition is true, the element right after && will appear in the output. If false it will skip it
condition ? true : false.

const doubled = numbers.map((number)=>number*2)
assign keys: key={number.toString()} --> ususally use id item.id --> or use index (not so good)

const content = posts.map((post) =>  #props.id works while props.key doesn't
  <Post
    key={post.id}
    id={post.id}
    title={post.title} />
);