Redux: predictable state container for JavaScript apps.
Dispatchers: classes that fire events

  Actions are payloads of information that send data from your application to your store. They are the only source of information for the store
    -Send them to store with: store.dispatch()
    -objects: 
        *must have type property that indicates type of action
        *can have index

Action creators are functions that crete actions 
function addTodo (text) {
    return {type:ADD_TODO,test}       -->   dispatch (addTodo(text))
}

Bound action creator that automatically dispatches
const boundAddTodo = text => dispatch(addTodo(text))
boundAddTodo(text)

store.dispatch()
bindActionCreators() #automatically bind many action creators to dispatch function

Reducer: specify how the application's state changes in response to actions sent to the store
(previousState, action) => newState
*if state is undefined return initalState
*create a copy with  Object.assign({}},---=---,---) (must have empyt object in first part)
*switch (case,case,default) its important to have a default for unknown action

combineReducers() #generate a function that calls your reducer with the states accoring to their keys

Store:
-Holds application state;
-Allows access to state via getState();
-Allows state to be updated via dispatch(action);
-Registers listeners via subscribe(listener);
-Handles unregistering of listeners via the function returned by subscribe(listener).
createStore(reducer,window.optional-initalState)

Data Life Cycle
1. store.dispatch(action) #brief news
2. store pass (current state, action) to reducer
3. root reducer may combine the outputs of multiple reducers into a single state combineReducers().
4. redux store asves the state tree returned by the root reducer
5. store.subscribe(listener) will now be invoked, listeners might call store.generate()


Contianer components
read data --> subscribe to redux
change data --> dispatch actions
