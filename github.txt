pwd
mkdir 
mkdir -p folder/folerr/folderrr
cd foldername/ #enter folder
Ls  #list

clear #clear screen

git version
git config --global user.name “Tania Guillot"
git config --global user.email “tguillot2000@gmail.com”
git config --global --list

mate ~/.gitconfig  #modify from the text mate
mate .tm_properties #from users modify the properties of text mate
mate document.txt #modify the document locally

git clone github-https-url  #paste in your GitHub HTTPS clone URL ls
echo "Test Git Quick Start demo" >> document.txt
cat document.txt
git status
git add document.txt #creates document and doesn’t change git history in any way (with a . All the documents)
git add . #recursive adding, so things in the directory
git commit -m "Adding document text file" #makes it commit with message
git commit #without any more commands its opens default message 
git push origin master  #upload to GitHub


Ls -al #show all files and folders (-al in listing format)
Cd .. #go back a directory
cd ../.. #go back as many directories as ../

mate document.txt #opens app to edit text

Rm -rf foldername/ #deletes folder

git pull origin master #updates local remote repository

git remote add origin https:// #from local computer chose repository
git push -u origin master #push the commit to the github

git commit -am (for tracked file)
git ls-files #know which tracked files

code . #open visual studio 
git reset HEAD document.txt #resets the add command to working directory
git checkout --github.txt #resets back to unchanged file

git mv oldname.txt newname.tx #change name of file in directory
(if done without git, the rename is considered like a deleted and added document)
git add -A #update moved deleted files, and recursive too (-am makes message too)
#do undo renmanes use mv, not reset head
git mv filename.txt folder/

git add renamed_or_moved_file.txt #when doing so manually from finder

rm filename.txt #untracked files
git rm filename.txt #tracked files

rm delete_file.txt
git reset HEAD deleted_file.txt #undo delete_file, doesnt restore
git checkout -- deleted_file.txt #recovers file

git help command #gives help for that command
git log #commits and changes in reverse order (q to quit)
git log --abbrev-commit #shortens id 
git log --oneline --graph --decorate one line, branching, graph, and labels
git log commit_id...comid_id_" #shows range
git log --since="3 days ago"
git log -- filename.txt #history of specific file
git log --follow -- filename.txt #can see renames
git show id_of_a_commit #shows that commit

git config --global alias.name_of_command "command without the git part" #created alias git
.gitignore #make file that ignores covument (list names, *extensions)

cp file_name.txt newfile_name.txt #copy file and rename

git branch #list branches
git branch -a #list current branches and remote one
git branch branch_name #make new branch
git checkout branch_name #be at new breanch
git branch -m branch_name new_branch_name #change the name of the branch name
git branch -d branch_name #delete branch

git diff master branch_name #shows differences
git merge branche_name #merge branch to master